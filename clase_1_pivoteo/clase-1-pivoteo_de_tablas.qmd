---
title: "Optimización de Tablas y Transformaciones Avanzadas"
subtitle: "Tratamiento de datos II"
format:
  revealjs: 
    slide-number: true
    code-copy: true
    code-tools: true
    execute:
      echo: true
    highlight-style: atom-one-light
    chalkboard: 
      buttons: true
    preview-links: auto
    logo: img/logo_estacionr.png
    #css: styles.css
resources:
  - demo.pdf
---

```{r}
#| echo: false
#| message: false
#| warning: false

options(scipen = 999)

library(dplyr)
library(janitor)
library(magrittr)
```


# Bienvenidos y bienvenidas a Estación R

::: columns
::: {.column width="33%"}
💬 [Slack](https://estacion-r.slack.com/archives/C08QB32P8S1)

🔗 [Web](https://estacion-r.com)

✉️ [Correo](mailto:pablotiscornia@estacion-r.com)
:::


::: {.column width="33%"}
🐘 [Mastodon](https://mastodon.social/@pablote)

𝕏 [X](https://twitter.com/estacion_erre)
:::

::: {.column width="33%"}
[in] [LinkedIn](https://www.linkedin.com/company/estacion-r/)

[ig] [Instagram](https://instagram.com/estacion.erre)
:::
:::


## Hoja de Ruta - Módulo I 

<br>

📌  Optimización de Tablas y Transformaciones Avanzadas

<br>

::: columns
::: {.column width="50%"}
📦 Paquete `{dplyr}`

```         
🔧 distinct() 
🔧 pull() 
🔧 relocate()
🔧 coalesce() 
🔧 na_if() 
🔧 slice()
```
:::

::: {.column width="50%"}
📦 Paquete `{tidyr}`

```         
🔧 pivot_longer() 
🔧 pivot_wider() 
```


📦 Paquete `{janitor}`

```         
🔧 clean_names() 🔧 tabyll()  
```
:::
:::



## Configuración para esta clase

<br>

::: incremental
- ✅ Armar un proyeto de trabajo 

- ✅ Crear una carpeta llamada `datos`

- ✅ Descargar la base de [**Ingreso de anual de Personas 2024 - MX**](https://github.com/Estacion-R/dominando_r/blob/main/data/base_personas_ingreso_anual_2024.csv) y ubicarla en la carpeta `datos`

- ✅ Crear un **script** de trabajo
:::


## Configuración para esta clase

- Código para cargar la base directo desde Github, sin tener que descargarla (se necesita conexión a internet)

<br>

```{r}
#| echo: true
library(readr)

### Cargo base de trabajo
valor_ruta <- "https://raw.githubusercontent.com/Estacion-R/dominando_r/main/data/base_personas_ingreso_anual_2024.csv"

df_ingresos_orig <- read_csv(valor_ruta)
```


## Procesamiento de datos - Mapa



## Procesamiento de datos - Buenas prácticas {.smaller .scrollable transition="slide"}

<br><br>

::: incremental
-   Diagnosticar
-   Procesar
-   Chequear
:::


## Procesamiento de datos - Buenas prácticas {.smaller .scrollable transition="slide"}

- Ejemplo: Nombre de columnas


::: panel-tabset

### Diagnosticar

```{r}
#| echo: true

colnames(df_ingresos_orig)
```

### Procesar

```{r}
#| echo: true

library(janitor)

df_ingresos_trab <- df_ingresos_orig %>% 
  clean_names()
```

### Chequear

```{r}
colnames(df_ingresos_trab)
```
:::


## Procesamiento de datos - Buenas prácticas {.smaller .scrollable transition="slide"}

- Ejemplo: Categorías de una variable

::: panel-tabset
### Diagnosticar

```{r}
unique(df_ingresos_trab$ciudad_residencia)
```

<br>

```{r}
length(unique(df_ingresos_trab$ciudad_residencia))
```

### Procesar

```{r}
library(dplyr)
library(stringr)

df_ingresos_trab <- df_ingresos_trab %>% 
  mutate(
    ciudad_residencia = str_to_lower(ciudad_residencia),
    ciudad_residencia = str_to_sentence(ciudad_residencia))
```

### Chequear

```{r}
unique(df_ingresos_trab$ciudad_residencia)
```

<br>

```{r}
length(unique(df_ingresos_trab$ciudad_residencia))
```
:::

## Pregunta

<br>

🗳 Votar: ¿Qué hace la función `str_to_title()`?

```{r}
str_to_title(c("pepe Locura", "Rodobolfo Lanzini", "lola lala"))
```

- 𝐀 --> Agrega una mayúscula a la primera letra de la primera palabra
- 𝐁 --> Agrega una mayúscula a la primera letra de todas las palabras
- 𝐂 --> Pasa todo a minúscula


## Procesamiento de datos

📚 Kit de funciones:

<br>

🪛 `janitor::clean_names()`: _Simplifica y estandariza nombres de columnas._

🪛 `dplyr::distinct()`: _Filtra y mantiene solo filas únicas según variables específicas._

🪛 `dplyr::pull()`: _Extrae una columna como vector._


## Procesamiento de datos

📚 Kit de funciones:

<br>

🪛 `dplyr::coalesce()`: _Ayuda a manejar valores faltantes reemplazándolos con valores específicos._

🪛 `dplyr::na_if()`: _Convierte valores específicos (por ejemplo valores erróneos) a NA._

🪛 `dplyr::slice()`: _Selecciona subconjuntos específicos de filas según su posición._


## Procesamiento de datos

<br>

🪛 `distinct()`: _Filtra y mantiene solo filas únicas según variables específicas._

```{r}
# Identifico casos duplicados si los hay

df_duplicados <- df_ingresos_trab %>% 
  get_dupes()

head(df_duplicados, n = 3)
```

## Procesamiento de datos

<br>

🪛 `distinct()`: _Filtra y mantiene solo filas únicas según variables específicas._

```{r}
# Identifico casos duplicados si los hay

df_ingresos_trab <- df_ingresos_trab %>% 
  distinct()

### Chequeo
df_ingresos_trab %>% 
  get_dupes()
```

## Procesamiento de datos

<br>

🪛 `pull()`: _Extrae una columna como vector, facilitando ciertas operaciones._

```{r}
# Obtener vector con todos los ingresos anuales, en modo tidyverse
vec_ingresos <- df_ingresos_trab |> 
  filter(ciudad_residencia == "Puebla") %>% 
  pull(ingreso_anual)

mean(vec_ingresos, na.rm = TRUE)

```


## Procesamiento de datos

<br>

🪛 `pull()`: _Extrae una columna como vector, facilitando ciertas operaciones._

```{r}
# Obtener vector con todos los ingresos anuales, en modo tidyverse
valor_ingreso_max_puebla <- df_ingresos_trab |> 
  filter(ciudad_residencia == "Puebla") %>% 
  filter(ingreso_anual == max(ingreso_anual, na.rm = TRUE)) %>% 
  pull(ingreso_anual)

valor_ingreso_max_puebla

```


## Procesamiento de datos

El ingreso máximo de la ciudad de Pueba es de **$`r format(valor_ingreso_max_puebla, big.mark = ".", decimal.mark = ",")`**


```{r}
# El ingreso máximo de la ciudad de Pueba es de **$`r format(valor_ingreso_max_puebla, big.mark = ".", decimal.mark = ",")`**

```


## Procesamiento de datos

<br>

🪛 `dplyr::coalesce()`: _Ayuda a manejar valores faltantes reemplazándolos con valores específicos._



## Procesamiento de datos

::: panel-tabset

### Diagnóstico
```{r}
# Chequeo valores NA en columna `ingreso_anual`
df_ingresos_trab %>% 
  count(
    "valores NA" = is.na(ingreso_anual)
    )
```

### Procesamiento
```{r}
# Reemplazo NA por ceros
df_ingresos_trab <- df_ingresos_trab %>% 
  mutate(
    ingreso_anual = coalesce(ingreso_anual, 0)
    )
```

### Chequeo

```{r}
# Chequeo valores NA en columna `ingreso_anual`
df_ingresos_trab %>% 
  count(
    "valores NA" = is.na(ingreso_anual)
    )
```

:::




